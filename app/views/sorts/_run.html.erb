<h2>Sort Question</h2>

<input type="hidden" name="sort_test_id" value="<%=@st.id%>"/>

<% sortee_array = @answer.nil? ? @st.sortee_array : @st.answer_hash_to_sortee_array(@answer) %>
<table>
<tr><td>
<div id="sortees">
<% sortee_array.each_with_index do |sortee, index| %>
  <div class="box" id="<%=index%>" draggable="true">
     <input type="hidden" name="sort_test_answer[<%=sortee%>]" value="<%=index%>"/>
     <header><%=index+1%></header>
     <p><%=sortee%></p>
  </div>
<% end %>
</div>
</td></tr>
</table>

<style type="text/css">
    [draggable] {
      -moz-user-select: none;
      -khtml-user-select: none;
      -webkit-user-select: none;
      user-select: none;
    }
    .box {
      height: 125px;
      width: 125px;
      float: left;
      border: 3px solid #0092BF;
      background-color: #FFEBDD;
      margin-right: 10px;
      -webkit-border-radius: 10px;
      -moz-border-radius: 10px;
      border-radius: 10px;
      text-align: center;
      cursor: move;
    }
    .box header {
      color: #fff;
      text-shadow: #000 0 1px;
      box-shadow: 5px;
      padding: 5px;
      background: -moz-linear-gradient(left center, rgb(0,0,0), rgb(79,79,79), rgb(21,21,21));
      background: -webkit-gradient(linear, left top, right top,
                                   color-stop(0, rgb(0,0,0)),
                                   color-stop(0.50, rgb(79,79,79)),
                                   color-stop(1, rgb(21,21,21)));
      border-bottom: 1px solid #ddd;
      -webkit-border-top-left-radius: 5px;
      -moz-border-radius-topleft: 5px;
      border-top-left-radius: 5px;
      -webkit-border-top-right-radius: 5px;
      -moz-border-radius-topright: 5px;
      border-top-right-radius: 5px;
    }
 </style>

<script type="text/javascript">

function apply_test_result(){
  var id_ = 'sortees';
  var inputs = document.querySelectorAll('#' + id_ + ' input');
  for(var i=0; i<inputs.length; i++){
    inputs[i].value = i
  };
}

(function () {
    var id_ = 'sortees';
    var boxes_ = document.querySelectorAll('#' + id_ + ' .box');
    var dragSrcEl_ = null;
    this.handleDragStart = function (e) {
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/html', this.innerHTML);
        dragSrcEl_ = this;
        this.style.opacity = '0.5';
        // this/e.target is the source node.
        this.addClassName('moving');
    };
    this.handleDragOver = function (e) {
        if (e.preventDefault) {
            e.preventDefault(); // Allows us to drop.
        }
        e.dataTransfer.dropEffect = 'move';
        return false;
    };
    this.handleDragEnter = function (e) {
        this.addClassName('over');
    };
    this.handleDragLeave = function (e) {
        // this/e.target is previous target element.
        this.removeClassName('over');
    };
    this.handleDrop = function (e) {
        // this/e.target is current target element.

        if (e.stopPropagation) {
            e.stopPropagation(); // stops the browser from redirecting.
        }
        // Don't do anything if we're dropping on the same box we're dragging.
        if (dragSrcEl_ != this) {
            dragSrcEl_.innerHTML = this.innerHTML;
            this.innerHTML = e.dataTransfer.getData('text/html')
            //var input = $('input', this)[0];
            //input.value = 1//dragSrcEl_.value
            //alert(this.innerHTML)
        }
        return false;
    };
    this.handleDragEnd = function (e) {
        apply_test_result();
        // this/e.target is the source node.
        this.style.opacity = '1';



        apply_test_result(); // Reset the answer hidden field
    };

    [ ].forEach.call(boxes_, function (box) {
        box.setAttribute('draggable', 'true');  // Enable boxes to be draggable.
        box.addEventListener('dragstart', this.handleDragStart, false);
        box.addEventListener('dragenter', this.handleDragEnter, false);
        box.addEventListener('dragover', this.handleDragOver, false);
        box.addEventListener('dragleave', this.handleDragLeave, false);
        box.addEventListener('drop', this.handleDrop, false);
        box.addEventListener('dragend', this.handleDragEnd, false);
    });
})();

</script>
